name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write   # required to push to CD repo with GITHUB_TOKEN or PAT

env:
  IMAGE_TAG: ${{ github.sha }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  slack_notify:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.notify.outputs.result }}
    steps:
      - name: Notify Slack - CI started
        id: notify
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"CI workflow started for branch '${GITHUB_REF}' commit '${GITHUB_SHA}'"}' \
            $SLACK_WEBHOOK_URL

  compile:
    runs-on: ubuntu-latest
    needs: slack_notify
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (LTS recommended)
        uses: actions/setup-node@v4
        with:
          node-version: '23'

      - name: Frontend Compilation (Syntax Check)
        run: |
          cd client
          find . -name "*.js" -exec node --check {} +

      - name: Backend Compilation (Syntax Check)
        run: |
          cd api
          find . -name "*.js" -exec node --check {} +

  gitleaks-scan:
    runs-on: ubuntu-latest
    needs: compile
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Gitleaks Setup
        uses: gitleaks/gitleaks-action@v2

      - name: Gitleaks Scan
        run: |
          gitleaks detect --source ./client --exit-code 1
          gitleaks detect --source ./api --exit-code 1

  trivy_fs_scan:
    runs-on: ubuntu-latest
    needs: gitleaks-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (FS)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  build_backend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image (backend)
        uses: docker/build-push-action@v6
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: |
            eshu786/backend:latest
            eshu786/backend:${{ env.IMAGE_TAG }}

  build_frontend_docker_image_and_push:
    runs-on: ubuntu-latest
    needs: trivy_fs_scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker image (frontend)
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          tags: |
            eshu786/frontend:latest
            eshu786/frontend:${{ env.IMAGE_TAG }}

  trivy_image_scan:
    runs-on: ubuntu-latest
    needs:
      - build_backend_docker_image_and_push
      - build_frontend_docker_image_and_push
    steps:
      - name: Checkout (noop, keeps workspace consistent)
        uses: actions/checkout@v4

      - name: Run Trivy image scan for backend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: eshu786/backend:${{ env.IMAGE_TAG }}
          format: table
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

      - name: Run Trivy image scan for frontend
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: eshu786/frontend:${{ env.IMAGE_TAG }}
          format: table
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  update_cd_repo:
    runs-on: ubuntu-latest
    needs: trivy_image_scan
    steps:
      - name: Checkout CD repo
        uses: actions/checkout@v4
        with:
          repository: eshu786/3-Tier-GitOps-CD
          ref: main
          token: ${{ secrets.CD_REPO_TOKEN }}
          path: cd

      - name: Bump images in manifests (safe)
        working-directory: cd
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64 -o yq && sudo install yq /usr/local/bin/yq
          yq -i '(. | select(.kind=="Service")) |= del(.spec.template)' k8s-prod/backend.yaml
          yq -i '(. | select(.kind=="Service")) |= del(.spec.template)' k8s-prod/frontend.yaml
          yq -i '(. | select(.kind=="Deployment") | .spec.template.spec.containers[] | select(.name=="backend") | .image) = "eshu786/backend:" + strenv(IMAGE_TAG)' k8s-prod/backend.yaml
          yq -i '(. | select(.kind=="Deployment") | .spec.template.spec.containers[] | select(.name=="frontend") | .image) = "eshu786/frontend:" + strenv(IMAGE_TAG)' k8s-prod/frontend.yaml

      - name: Commit & push to CD repo
        working-directory: cd
        run: |
          git config user.name "ci-bot"
          git config user.email "ci-bot@users.noreply.github.com"
          git add -A
          git commit -m "bump images to ${IMAGE_TAG}" || echo "no changes"
          git push

  notify_slack_success:
    runs-on: ubuntu-latest
    needs: update_cd_repo
    steps:
      - name: Notify Slack - CI SUCCESS
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"✅ CI workflow SUCCESSFUL for branch '${GITHUB_REF}' commit '${GITHUB_SHA}'"}' \
            $SLACK_WEBHOOK_URL

  notify_slack_failure:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify Slack - CI FAILED
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"❌ CI workflow FAILED for branch '${GITHUB_REF}' commit '${GITHUB_SHA}'"}' \
            $SLACK_WEBHOOK_URL
